/*
 * Copyright 2022-2024 Ponfee (http://www.ponfee.cn/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cn.ponfee.disjob.supervisor.base;

import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.mapper.MapperScannerConfigurer;
import org.springframework.beans.BeanInstantiationException;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.support.*;
import org.springframework.boot.context.properties.bind.Bindable;
import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.EnvironmentAware;
import org.springframework.core.env.Environment;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.lang.NonNull;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionTemplate;

import javax.sql.DataSource;
import java.io.IOException;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * Abstract Datasource Configuration.
 *
 * @author Ponfee
 */
public abstract class AbstractDataSourceConfig implements ApplicationContextAware, EnvironmentAware, BeanDefinitionRegistryPostProcessor {

    public static final String DATA_SOURCE_NAME_SUFFIX               = "DataSource";
    public static final String SQL_SESSION_FACTORY_NAME_SUFFIX       = "SqlSessionFactory";
    public static final String SQL_SESSION_TEMPLATE_NAME_SUFFIX      = "SqlSessionTemplate";
    public static final String TX_MANAGER_NAME_SUFFIX                = "TransactionManager";
    public static final String TX_TEMPLATE_NAME_SUFFIX               = "TransactionTemplate";
    public static final String JDBC_TEMPLATE_NAME_SUFFIX             = "JdbcTemplate";
    public static final String MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX = "MapperScannerConfigurer";

    private final String databaseName;
    private final String mybatisMapperFileLocation;

    private ApplicationContext applicationContext;
    private Environment environment;

    public AbstractDataSourceConfig(String databaseName) {
        this(databaseName, -1);
    }

    public AbstractDataSourceConfig(String databaseName, int wildcardLastIndex) {
        this.databaseName = databaseName;

        List<String> list = Arrays.stream(ClassUtils.getPackageName(getClass()).split("\\."))
            .filter(StringUtils::isNotEmpty)
            .collect(Collectors.toList());
        String path;
        if (list.isEmpty()) {
            path = "";
        } else if (wildcardLastIndex == 0) {
            path = String.join("/", list) + "/**/";
        } else if (wildcardLastIndex < 0) {
            path = String.join("/", list) + "/";
        } else if (list.size() <= wildcardLastIndex) {
            path = "/**/" + String.join("/", list) + "/";
        } else {
            int pos = list.size() - wildcardLastIndex;
            path = String.join("/", list.subList(0, pos)) + "/**/" + String.join("/", list.subList(pos, list.size())) + "/";
        }
        // classpath*:cn/ponfee/disjob/supervisor/dao/xml/*.xml
        this.mybatisMapperFileLocation = MessageFormat.format("classpath*:{0}xml/*.xml", path);
    }

    public AbstractDataSourceConfig(String databaseName, String mybatisMapperFileLocation) {
        this.databaseName = databaseName;
        this.mybatisMapperFileLocation = mybatisMapperFileLocation;
    }

    // ------------------------------------------------------------------------methods

    @Override
    public void setApplicationContext(@NonNull ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    @Override
    public void setEnvironment(@NonNull Environment environment) {
        this.environment = environment;
    }

    /**
     * 使用该方式时，基于注解方式的事务不生效
     */
    @Override
    public void postProcessBeanFactory(@NonNull ConfigurableListableBeanFactory listableBeanFactory) throws BeansException {
        // -------------------------data source
        DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) listableBeanFactory;
        DataSource dataSource = DataSourceBuilder.create()
            //.type(com.zaxxer.hikari.HikariDataSource.class)
            .build();
        Binder binder = Binder.get(environment);
        binder.bind(databaseName + ".datasource", Bindable.ofInstance(dataSource));
        beanFactory.registerSingleton(databaseName + DATA_SOURCE_NAME_SUFFIX, dataSource);

        // -------------------------register to spring as singleton bean
        SqlSessionFactory sqlSessionFactory;
        try {
            sqlSessionFactory = createSqlSessionFactory(dataSource);
        } catch (Exception e) {
            throw new BeanInstantiationException(SqlSessionFactory.class, "Create mybatis SqlSessionFactory error.", e);
        }
        beanFactory.registerSingleton(databaseName + SQL_SESSION_FACTORY_NAME_SUFFIX, sqlSessionFactory);
        beanFactory.registerSingleton(databaseName + SQL_SESSION_TEMPLATE_NAME_SUFFIX, new SqlSessionTemplate(sqlSessionFactory));
        beanFactory.registerSingleton(databaseName + JDBC_TEMPLATE_NAME_SUFFIX, new JdbcTemplate(dataSource));
        PlatformTransactionManager transactionManager = new DataSourceTransactionManager(dataSource);
        beanFactory.registerSingleton(databaseName + TX_MANAGER_NAME_SUFFIX, transactionManager);
        beanFactory.registerSingleton(databaseName + TX_TEMPLATE_NAME_SUFFIX, new TransactionTemplate(transactionManager));

        // -------------------------mybatis mapper scanner
        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();
        mapperScannerConfigurer.setBasePackage(this.getClass().getPackage().getName() + ".mapper");
        mapperScannerConfigurer.setSqlSessionTemplateBeanName(databaseName + SQL_SESSION_TEMPLATE_NAME_SUFFIX);
        mapperScannerConfigurer.setBeanName(databaseName + MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX);
        mapperScannerConfigurer.postProcessBeanDefinitionRegistry(beanFactory);
        mapperScannerConfigurer.setProcessPropertyPlaceHolders(true);
        mapperScannerConfigurer.setApplicationContext(applicationContext);
        beanFactory.registerSingleton(databaseName + MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX, mapperScannerConfigurer);
    }

    /**
     * 使用该方式时，基于注解方式的事务不生效
     * 要加`@EnableTransactionManagement`才能使事务生效
     */
    @Override
    public void postProcessBeanDefinitionRegistry(@NonNull BeanDefinitionRegistry registry) throws BeansException {
        // MapperScannerConfigurer bean definition
        BeanDefinitionBuilder mapperScannerConfigurerBdb = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);
        mapperScannerConfigurerBdb.addPropertyValue("processPropertyPlaceHolders", true);
        mapperScannerConfigurerBdb.addPropertyValue("basePackage", this.getClass().getPackage().getName() + ".mapper");
        mapperScannerConfigurerBdb.addPropertyValue("sqlSessionTemplateBeanName", databaseName + SQL_SESSION_TEMPLATE_NAME_SUFFIX);
        mapperScannerConfigurerBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(databaseName + MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX, mapperScannerConfigurerBdb.getBeanDefinition());

        // DataSource bean definition
        BeanDefinitionBuilder dataSourceBdb = BeanDefinitionBuilder.genericBeanDefinition(DataSource.class);
        dataSourceBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        AbstractBeanDefinition dataSourceBd = dataSourceBdb.getBeanDefinition();
        final Binder binder = Binder.get(environment);
        dataSourceBd.setInstanceSupplier(() -> {
            DataSource dataSource = DataSourceBuilder.create().build();
            binder.bind(databaseName + ".datasource", Bindable.ofInstance(dataSource));
            return dataSource;
        });
        registry.registerBeanDefinition(databaseName + DATA_SOURCE_NAME_SUFFIX, dataSourceBd);

        // SqlSessionFactoryBean bean definition
        BeanDefinitionBuilder sqlSessionFactoryBeanBdb = BeanDefinitionBuilder.genericBeanDefinition(SqlSessionFactoryBean.class);
        sqlSessionFactoryBeanBdb.addPropertyReference("dataSource", databaseName + DATA_SOURCE_NAME_SUFFIX);
        try {
            sqlSessionFactoryBeanBdb.addPropertyValue("configuration", createMybatisConfiguration());
            sqlSessionFactoryBeanBdb.addPropertyValue("mapperLocations", new PathMatchingResourcePatternResolver().getResources(mybatisMapperFileLocation));
        } catch (IOException e) {
            throw new BeanInstantiationException(SqlSessionFactory.class, "Load mybatis location file error.", e);
        }
        sqlSessionFactoryBeanBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(databaseName + SQL_SESSION_FACTORY_NAME_SUFFIX, sqlSessionFactoryBeanBdb.getBeanDefinition());

        // SqlSessionTemplate bean definition
        BeanDefinitionBuilder sqlSessionTemplateBdb = BeanDefinitionBuilder.genericBeanDefinition(SqlSessionTemplate.class);
        sqlSessionTemplateBdb.addConstructorArgReference(databaseName + SQL_SESSION_FACTORY_NAME_SUFFIX);
        sqlSessionTemplateBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(databaseName + SQL_SESSION_TEMPLATE_NAME_SUFFIX, sqlSessionTemplateBdb.getBeanDefinition());

        // JdbcTemplate bean definition
        BeanDefinitionBuilder jdbcTemplateBdb = BeanDefinitionBuilder.genericBeanDefinition(JdbcTemplate.class);
        jdbcTemplateBdb.addConstructorArgReference(databaseName + DATA_SOURCE_NAME_SUFFIX);
        jdbcTemplateBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(databaseName + JDBC_TEMPLATE_NAME_SUFFIX, jdbcTemplateBdb.getBeanDefinition());

        // DataSourceTransactionManager bean definition
        BeanDefinitionBuilder dataSourceTransactionManagerBdb = BeanDefinitionBuilder.genericBeanDefinition(DataSourceTransactionManager.class);
        dataSourceTransactionManagerBdb.addConstructorArgReference(databaseName + DATA_SOURCE_NAME_SUFFIX);
        dataSourceTransactionManagerBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(databaseName + TX_MANAGER_NAME_SUFFIX, dataSourceTransactionManagerBdb.getBeanDefinition());

        // TransactionTemplate bean definition
        BeanDefinitionBuilder transactionTemplateBdb = BeanDefinitionBuilder.genericBeanDefinition(TransactionTemplate.class);
        transactionTemplateBdb.addConstructorArgReference(databaseName + TX_MANAGER_NAME_SUFFIX);
        transactionTemplateBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(databaseName + TX_TEMPLATE_NAME_SUFFIX, transactionTemplateBdb.getBeanDefinition());

        // annotation transaction
        //registry.registerBeanDefinition(AutoProxyRegistrar.class.getName(), new RootBeanDefinition(AutoProxyRegistrar.class));
        //registry.registerBeanDefinition(ProxyTransactionManagementConfiguration.class.getName(), new RootBeanDefinition(ProxyTransactionManagementConfiguration.class));
    }

    private SqlSessionFactory createSqlSessionFactory(DataSource dataSource) throws Exception {
        SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
        factoryBean.setDataSource(dataSource);
        factoryBean.setConfiguration(createMybatisConfiguration());
        factoryBean.setMapperLocations(new PathMatchingResourcePatternResolver().getResources(mybatisMapperFileLocation));
        return factoryBean.getObject();
    }

    private static Configuration createMybatisConfiguration() {
        Configuration configuration = new Configuration();
        // 下划线转驼峰：默认false
        configuration.setMapUnderscoreToCamelCase(true);
        // 为驱动的结果集获取数量（fetchSize）设置一个建议值，此参数只可以在查询设置中被覆盖：默认null
        configuration.setDefaultFetchSize(100);
        // 超时时间，它决定数据库驱动等待数据库响应的秒数：默认null
        configuration.setDefaultStatementTimeout(25);

        return configuration;
    }
}

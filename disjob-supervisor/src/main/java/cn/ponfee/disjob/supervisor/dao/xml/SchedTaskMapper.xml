<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.ponfee.disjob.supervisor.dao.mapper.SchedTaskMapper">

  <sql id="Table_Name">sched_task</sql>

  <sql id="Base_Column_List">
    task_id, instance_id, task_no, task_count, execute_state, worker, version
  </sql>

  <sql id="Large_Column_List">
    <include refid="Base_Column_List" />,
    execute_start_time, execute_end_time, execute_duration,
    task_param, execute_snapshot, dispatch_failed_count,
    error_msg, updated_at, created_at
  </sql>

  <insert id="batchInsert" parameterType="collection" keyColumn="id" keyProperty="id" useGeneratedKeys="true">
    INSERT INTO <include refid="Table_Name" /> (
      task_id,
      instance_id,
      task_no,
      task_count,
      task_param,
      execute_state,
      worker,
      updated_at,
      created_at
    ) VALUES
    <foreach collection="collection" item="item" separator=",">
    (
      #{item.taskId,jdbcType=BIGINT},
      #{item.instanceId,jdbcType=BIGINT},
      #{item.taskNo,jdbcType=INTEGER},
      #{item.taskCount,jdbcType=INTEGER},
      #{item.taskParam,jdbcType=LONGVARCHAR},
      #{item.executeState,jdbcType=TINYINT},
      #{item.worker,jdbcType=VARCHAR},
      #{item.updatedAt,jdbcType=TIMESTAMP},
      #{item.createdAt,jdbcType=TIMESTAMP}
    )
    </foreach>
  </insert>

  <select id="get" parameterType="_long" resultType="cn.ponfee.disjob.core.model.SchedTask">
    SELECT <include refid="Large_Column_List" />
    FROM <include refid="Table_Name" />
    WHERE task_id = #{taskId,jdbcType=BIGINT}
  </select>

  <select id="findBaseByInstanceId" parameterType="_long" resultType="cn.ponfee.disjob.core.model.SchedTask">
    SELECT <include refid="Base_Column_List" />
    FROM <include refid="Table_Name" />
    WHERE instance_id = #{instanceId,jdbcType=BIGINT}
  </select>

  <select id="findBaseByInstanceIdAndStates" resultType="cn.ponfee.disjob.core.model.SchedTask">
    SELECT <include refid="Base_Column_List" />
    FROM <include refid="Table_Name" />
    WHERE instance_id = #{instanceId,jdbcType=BIGINT}
      AND execute_state IN (<foreach collection="states" separator="," item="state">#{state,jdbcType=TINYINT}</foreach>)
  </select>

  <select id="findLargeByInstanceId" parameterType="_long" resultType="cn.ponfee.disjob.core.model.SchedTask">
    SELECT <include refid="Large_Column_List" />
    FROM <include refid="Table_Name" />
    WHERE instance_id = #{instanceId,jdbcType=BIGINT}
  </select>

  <update id="incrementDispatchFailedCount">
    UPDATE <include refid="Table_Name" />
    SET dispatch_failed_count = (#{currentDispatchFailedCount,jdbcType=TINYINT} + 1),
        version = version + 1
    WHERE task_id = #{taskId,jdbcType=BIGINT}
      AND dispatch_failed_count = #{currentDispatchFailedCount,jdbcType=TINYINT}
      AND execute_state = 10
  </update>

  <!-- use `IFNULL` function reason: possibly re-execute the paused task -->
  <update id="start">
    UPDATE <include refid="Table_Name" />
    SET execute_state = 20,
        execute_start_time = IFNULL(execute_start_time, #{executeStartTime,jdbcType=TIMESTAMP}),
        worker = #{worker,jdbcType=VARCHAR},
        version = version+1
    WHERE task_id = #{taskId,jdbcType=BIGINT}
      AND execute_state = 10
  </update>

  <update id="terminate">
    UPDATE <include refid="Table_Name" />
    SET execute_state    = #{toState,jdbcType=TINYINT},
      <if test="executeEndTime != null">
        execute_end_time = IF(execute_start_time IS NULL, NULL, #{executeEndTime,jdbcType=TIMESTAMP}),
        execute_duration = ROUND(TIMESTAMPDIFF(MICROSECOND, execute_start_time, #{executeEndTime,jdbcType=TIMESTAMP}) / 1000),
      </if>
      <if test="errorMsg!=null and errorMsg.length()>0">
        error_msg = #{errorMsg,jdbcType=VARCHAR},
      </if>
        version = version + 1
    WHERE task_id = #{taskId,jdbcType=BIGINT}
      <if test="worker != null and worker != ''">
        AND worker = #{worker,jdbcType=VARCHAR}
      </if>
      AND execute_state = #{fromState,jdbcType=TINYINT}
      AND execute_state != #{toState,jdbcType=TINYINT}
      AND execute_state IN (10, 20, 30)
  </update>

  <update id="updateStateByInstanceId">
    UPDATE <include refid="Table_Name" />
    SET execute_state = #{toState,jdbcType=TINYINT},
        <if test="executeEndTime != null">
          execute_end_time = IF(execute_start_time IS NULL, NULL, #{executeEndTime,jdbcType=TIMESTAMP}),
          execute_duration = ROUND(TIMESTAMPDIFF(MICROSECOND, execute_start_time, #{executeEndTime,jdbcType=TIMESTAMP}) / 1000),
        </if>
        version = version+1
    WHERE instance_id = #{instanceId,jdbcType=BIGINT}
      AND execute_state != #{toState,jdbcType=TINYINT}
      AND execute_state IN (<foreach collection="fromStateList" separator="," item="state">#{state,jdbcType=TINYINT}</foreach>)
  </update>

  <update id="changeState">
    UPDATE <include refid="Table_Name" />
    SET execute_state = #{toState,jdbcType=TINYINT},
        version = version+1
    WHERE instance_id = #{instanceId,jdbcType=BIGINT}
      AND execute_state != #{toState,jdbcType=TINYINT}
      AND execute_state != 20
      AND #{toState,jdbcType=TINYINT} != 20
  </update>

  <update id="savepoint">
    UPDATE <include refid="Table_Name" />
    SET execute_snapshot = #{executeSnapshot,jdbcType=LONGVARCHAR},
        version = version+1
    WHERE task_id = #{taskId,jdbcType=BIGINT}
      AND execute_state = 20
  </update>

  <delete id="deleteByInstanceId" parameterType="_long">
    DELETE FROM <include refid="Table_Name" />
    WHERE instance_id = #{instanceId,jdbcType=BIGINT}
      AND (SELECT cnt FROM (SELECT COUNT(*) cnt FROM <include refid="Table_Name" /> WHERE instance_id = #{instanceId,jdbcType=BIGINT} AND execute_state &lt; 40) t)=0
  </delete>

  <!-- 使用其它的批量方式需要添加jdbc参数：allowMultiQueries=true&rewriteBatchedStatements=true -->
  <update id="batchUpdateWorker" parameterType="list">
    UPDATE <include refid="Table_Name" />
    SET version = version+1,
        worker =
          CASE
            <foreach collection="list" item="item" separator=" ">
              WHEN task_id = #{item.taskId,jdbcType=BIGINT} THEN #{item.worker,jdbcType=VARCHAR}
            </foreach>
          END
    WHERE task_id IN (<foreach collection="list" separator="," item="item">#{item.taskId,jdbcType=BIGINT}</foreach>)
  </update>

</mapper>

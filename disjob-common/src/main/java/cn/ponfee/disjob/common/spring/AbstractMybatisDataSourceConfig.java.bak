/*
 * Copyright 2022-2024 Ponfee (http://www.ponfee.cn/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package cn.ponfee.disjob.common.spring;

import org.apache.commons.lang3.ClassUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.io.VFS;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.SqlSessionTemplate;
import org.mybatis.spring.boot.autoconfigure.SpringBootVFS;
import org.mybatis.spring.mapper.MapperScannerConfigurer;
import org.springframework.beans.BeanInstantiationException;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.support.*;
import org.springframework.boot.context.properties.bind.Bindable;
import org.springframework.boot.context.properties.bind.Binder;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.EnvironmentAware;
import org.springframework.core.env.Environment;
import org.springframework.core.io.Resource;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.lang.NonNull;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.transaction.support.TransactionTemplate;

import javax.sql.DataSource;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * <pre>
 * Abstract Mybatis Datasource Configuration.
 *
 * 需要加`@EnableTransactionManagement`才能使事务生效
 *
 * e.g.: {@code
 *   @Configuration
 *   public class SupervisorMybatisDataSourceConfig extends AbstractMybatisDataSourceConfig {
 *     public SupervisorMybatisDataSourceConfig() {
 *       super("disjob");
 *     }
 *   }
 * }
 * </pre>
 *
 * @author Ponfee
 */
@EnableTransactionManagement
public abstract class AbstractMybatisDataSourceConfig implements EnvironmentAware, BeanDefinitionRegistryPostProcessor {

    public static final String DATA_SOURCE_NAME_SUFFIX               = "DataSource";
    public static final String SQL_SESSION_FACTORY_NAME_SUFFIX       = "SqlSessionFactory";
    public static final String SQL_SESSION_TEMPLATE_NAME_SUFFIX      = "SqlSessionTemplate";
    public static final String TX_MANAGER_NAME_SUFFIX                = "TransactionManager";
    public static final String TX_TEMPLATE_NAME_SUFFIX               = "TransactionTemplate";
    public static final String JDBC_TEMPLATE_NAME_SUFFIX             = "JdbcTemplate";
    public static final String MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX = "MapperScannerConfigurer";

    private final String dataSourceName;
    private final String basePackage;
    private final String[] mapperLocations;

    private Environment environment;

    protected AbstractMybatisDataSourceConfig(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        this.basePackage = ClassUtils.getPackageName(getClass());
        this.mapperLocations = new String[]{"classpath*:" + ClassUtils.getPackageName(getClass()).replace('.', '/') + "/**/*.xml"};
    }

    protected AbstractMybatisDataSourceConfig(String dataSourceName, String basePackage, String[] mapperLocations) {
        this.dataSourceName = dataSourceName;
        this.basePackage = basePackage;
        this.mapperLocations = mapperLocations;
    }

    // ------------------------------------------------------------------------methods

    @Override
    public void setEnvironment(@NonNull Environment environment) {
        this.environment = environment;
    }

    /**
     * postProcessBeanDefinitionRegistry：通常用于添加bean定义
     */
    @Override
    public void postProcessBeanDefinitionRegistry(@NonNull BeanDefinitionRegistry registry) throws BeansException {
        String dataSourceConfigPrefixKey = dataSourceName + ".datasource";
        String jdbcUrl = environment.getProperty(dataSourceConfigPrefixKey + ".jdbc-url");
        if (StringUtils.isBlank(jdbcUrl)) {
            return;
        }

        // MapperScannerConfigurer bean definition
        BeanDefinitionBuilder mapperScannerConfigurerBdb = BeanDefinitionBuilder.genericBeanDefinition(MapperScannerConfigurer.class);
        mapperScannerConfigurerBdb.addPropertyValue("processPropertyPlaceHolders", true);
        mapperScannerConfigurerBdb.addPropertyValue("basePackage", basePackage);
        mapperScannerConfigurerBdb.addPropertyValue("sqlSessionTemplateBeanName", dataSourceName + SQL_SESSION_TEMPLATE_NAME_SUFFIX);
        mapperScannerConfigurerBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(dataSourceName + MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX, mapperScannerConfigurerBdb.getBeanDefinition());

        // DataSource bean definition
        BeanDefinitionBuilder dataSourceBdb = BeanDefinitionBuilder.genericBeanDefinition(DataSource.class);
        dataSourceBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        AbstractBeanDefinition dataSourceBd = dataSourceBdb.getBeanDefinition();
        dataSourceBd.setInstanceSupplier(() -> {
            Binder binder = Binder.get(environment);
            DataSource dataSource = DataSourceBuilder.create().build();
            binder.bind(dataSourceConfigPrefixKey, Bindable.ofInstance(dataSource));
            return dataSource;
        });
        registry.registerBeanDefinition(dataSourceName + DATA_SOURCE_NAME_SUFFIX, dataSourceBd);

        // SqlSessionFactoryBean bean definition
        BeanDefinitionBuilder sqlSessionFactoryBeanBdb = BeanDefinitionBuilder.genericBeanDefinition(SqlSessionFactoryBean.class);
        sqlSessionFactoryBeanBdb.addPropertyReference("dataSource", dataSourceName + DATA_SOURCE_NAME_SUFFIX);
        sqlSessionFactoryBeanBdb.addPropertyValue("configuration", createMybatisConfiguration());
        sqlSessionFactoryBeanBdb.addPropertyValue("mapperLocations", createMybatisMapperLocations(mapperLocations));
        sqlSessionFactoryBeanBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(dataSourceName + SQL_SESSION_FACTORY_NAME_SUFFIX, sqlSessionFactoryBeanBdb.getBeanDefinition());

        // SqlSessionTemplate bean definition
        BeanDefinitionBuilder sqlSessionTemplateBdb = BeanDefinitionBuilder.genericBeanDefinition(SqlSessionTemplate.class);
        sqlSessionTemplateBdb.addConstructorArgReference(dataSourceName + SQL_SESSION_FACTORY_NAME_SUFFIX);
        sqlSessionTemplateBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(dataSourceName + SQL_SESSION_TEMPLATE_NAME_SUFFIX, sqlSessionTemplateBdb.getBeanDefinition());

        // JdbcTemplate bean definition
        BeanDefinitionBuilder jdbcTemplateBdb = BeanDefinitionBuilder.genericBeanDefinition(JdbcTemplate.class);
        jdbcTemplateBdb.addConstructorArgReference(dataSourceName + DATA_SOURCE_NAME_SUFFIX);
        jdbcTemplateBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(dataSourceName + JDBC_TEMPLATE_NAME_SUFFIX, jdbcTemplateBdb.getBeanDefinition());

        // DataSourceTransactionManager bean definition
        BeanDefinitionBuilder dataSourceTransactionManagerBdb = BeanDefinitionBuilder.genericBeanDefinition(DataSourceTransactionManager.class);
        dataSourceTransactionManagerBdb.addConstructorArgReference(dataSourceName + DATA_SOURCE_NAME_SUFFIX);
        dataSourceTransactionManagerBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(dataSourceName + TX_MANAGER_NAME_SUFFIX, dataSourceTransactionManagerBdb.getBeanDefinition());

        // TransactionTemplate bean definition
        BeanDefinitionBuilder transactionTemplateBdb = BeanDefinitionBuilder.genericBeanDefinition(TransactionTemplate.class);
        transactionTemplateBdb.addConstructorArgReference(dataSourceName + TX_MANAGER_NAME_SUFFIX);
        transactionTemplateBdb.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);
        registry.registerBeanDefinition(dataSourceName + TX_TEMPLATE_NAME_SUFFIX, transactionTemplateBdb.getBeanDefinition());
    }

    /**
     * postProcessBeanFactory：通常是用于修改bean的定义
     */
    @Override
    public void postProcessBeanFactory(@NonNull ConfigurableListableBeanFactory listableBeanFactory) throws BeansException {
        /*
        // -------------------------data source
        String dataSourceConfigPrefixKey = dataSourceName + ".datasource";
        String jdbcUrl = environment.getProperty(dataSourceConfigPrefixKey + ".jdbc-url");
        if (StringUtils.isBlank(jdbcUrl)) {
            return;
        }

        DefaultListableBeanFactory beanFactory = (DefaultListableBeanFactory) listableBeanFactory;
        DataSource dataSource = DataSourceBuilder.create()
            //.type(com.zaxxer.hikari.HikariDataSource.class)
            .build();
        Binder binder = Binder.get(environment);
        binder.bind(dataSourceConfigPrefixKey, Bindable.ofInstance(dataSource));
        beanFactory.registerSingleton(dataSourceName + DATA_SOURCE_NAME_SUFFIX, dataSource);

        // -------------------------register to spring as singleton bean
        SqlSessionFactory sqlSessionFactory;
        try {
            SqlSessionFactoryBean factoryBean = new SqlSessionFactoryBean();
            factoryBean.setDataSource(dataSource);
            factoryBean.setConfiguration(createMybatisConfiguration());
            factoryBean.setMapperLocations(createMybatisMapperLocations(mapperLocations));
            sqlSessionFactory = factoryBean.getObject();
        } catch (Exception e) {
            throw new BeanInstantiationException(SqlSessionFactory.class, "Create mybatis SqlSessionFactory error.", e);
        }
        beanFactory.registerSingleton(dataSourceName + SQL_SESSION_FACTORY_NAME_SUFFIX, sqlSessionFactory);
        beanFactory.registerSingleton(dataSourceName + SQL_SESSION_TEMPLATE_NAME_SUFFIX, new SqlSessionTemplate(sqlSessionFactory));
        beanFactory.registerSingleton(dataSourceName + JDBC_TEMPLATE_NAME_SUFFIX, new JdbcTemplate(dataSource));
        org.springframework.transaction.PlatformTransactionManager transactionManager = new DataSourceTransactionManager(dataSource);
        beanFactory.registerSingleton(dataSourceName + TX_MANAGER_NAME_SUFFIX, transactionManager);
        beanFactory.registerSingleton(dataSourceName + TX_TEMPLATE_NAME_SUFFIX, new TransactionTemplate(transactionManager));

        // -------------------------mybatis mapper scanner
        MapperScannerConfigurer mapperScannerConfigurer = new MapperScannerConfigurer();
        mapperScannerConfigurer.setBasePackage(basePackage);
        mapperScannerConfigurer.setSqlSessionTemplateBeanName(dataSourceName + SQL_SESSION_TEMPLATE_NAME_SUFFIX);
        mapperScannerConfigurer.setBeanName(dataSourceName + MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX);
        mapperScannerConfigurer.postProcessBeanDefinitionRegistry(beanFactory);
        mapperScannerConfigurer.setProcessPropertyPlaceHolders(true);
        beanFactory.registerSingleton(dataSourceName + MAPPER_SCANNER_CONFIGURER_NAME_SUFFIX, mapperScannerConfigurer);
        */
    }

    private static Resource[] createMybatisMapperLocations(String[] mybatisMapperLocations) {
        try {
            List<Resource> resources = new ArrayList<>();
            for (String mapperLocation : mybatisMapperLocations) {
                resources.addAll(Arrays.asList(new PathMatchingResourcePatternResolver().getResources(mapperLocation)));
            }
            return resources.toArray(new Resource[0]);
        } catch (IOException e) {
            String locations = Arrays.toString(mybatisMapperLocations);
            throw new BeanInstantiationException(SqlSessionFactory.class, "Load mybatis mapper locations error: " + locations, e);
        }
    }

    private static Configuration createMybatisConfiguration() {
        VFS.addImplClass(SpringBootVFS.class);

        Configuration configuration = new Configuration();
        // 下划线转驼峰：默认false
        configuration.setMapUnderscoreToCamelCase(true);
        // 为驱动的结果集获取数量（fetchSize）设置一个建议值，此参数只可以在查询设置中被覆盖：默认null
        configuration.setDefaultFetchSize(100);
        // 超时时间，它决定数据库驱动等待数据库响应的秒数：默认null
        configuration.setDefaultStatementTimeout(25);

        return configuration;
    }

}
